#!/usr/bin/env python3
"""
Slack Alert Demo Script
=======================

Demonstrates Slack webhook integration for credit rating alerts.
This script simulates high-risk scenarios and sends alerts to Slack channels.

Usage:
1. Set your Slack webhook URL
2. Run the script to test alert functionality
3. Check your Slack channel for alerts

Author: Korean Airlines Credit Rating Analysis
"""

import requests
import json
from datetime import datetime
from typing import Dict, List, Optional
import pandas as pd

# Import our models
try:
    from rating_risk_scorer import RatingRiskScorer, FirmProfile
    MODEL_AVAILABLE = True
except ImportError:
    print("⚠️ Model modules not available")
    MODEL_AVAILABLE = False

class SlackAlertManager:
    """
    Manages Slack webhook alerts for credit rating risks
    """
    
    def __init__(self, webhook_url: Optional[str] = None):
        """
        Initialize Slack alert manager
        
        Args:
            webhook_url: Slack webhook URL for sending alerts
        """
        self.webhook_url = webhook_url
        self.alert_history = []
    
    def set_webhook_url(self, webhook_url: str):
        """Set or update Slack webhook URL"""
        self.webhook_url = webhook_url
    
    def create_alert_message(self, high_risk_firms: pd.DataFrame, 
                           threshold: float = 0.15) -> str:
        """Create formatted alert message for Slack"""
        
        if high_risk_firms.empty:
            return ""
        
        # Create rich Slack message with blocks
        alert_blocks = [
            {
                "type": "header",
                "text": {
                    "type": "plain_text",
                    "text": "🚨 Credit Rating Risk Alert - Korean Airlines"
                }
            },
            {
                "type": "context",
                "elements": [
                    {
                        "type": "mrkdwn",
                        "text": f"Alert triggered at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                    }
                ]
            },
            {
                "type": "section",
                "text": {
                    "type": "mrkdwn",
                    "text": f"*{len(high_risk_firms)} firms* exceed the risk threshold of *{threshold:.1%}*:"
                }
            }
        ]
        
        # Add firm details
        for _, firm in high_risk_firms.iterrows():
            risk_emoji = "🔴" if firm['overall_risk'] > 0.25 else "🟠" if firm['overall_risk'] > 0.20 else "🟡"
            
            firm_block = {
                "type": "section",
                "fields": [
                    {
                        "type": "mrkdwn",
                        "text": f"*Company:*\n{firm['company']}"
                    },
                    {
                        "type": "mrkdwn",
                        "text": f"*Current Rating:*\n{firm['current_rating']}"
                    },
                    {
                        "type": "mrkdwn",
                        "text": f"*Overall Risk:*\n{risk_emoji} {firm['overall_risk']:.1%}"
                    },
                    {
                        "type": "mrkdwn",
                        "text": f"*Downgrade Risk:*\n{firm['downgrade_prob']:.1%}"
                    }
                ]
            }
            alert_blocks.append(firm_block)
        
        # Add actions
        alert_blocks.extend([
            {
                "type": "divider"
            },
            {
                "type": "section",
                "text": {
                    "type": "mrkdwn",
                    "text": "*Recommended Actions:*\n• Monitor financial performance closely\n• Review credit facilities\n• Update risk assessments"
                }
            },
            {
                "type": "context",
                "elements": [
                    {
                        "type": "mrkdwn",
                        "text": "_Generated by Korean Airlines Credit Risk Monitor_"
                    }
                ]
            }
        ])
        
        return alert_blocks
    
    def send_alert(self, high_risk_firms: pd.DataFrame, 
                   threshold: float = 0.15,
                   channel: str = "#risk-monitoring") -> bool:
        """
        Send alert to Slack webhook
        
        Args:
            high_risk_firms: DataFrame with high-risk firm data
            threshold: Risk threshold that triggered the alert
            channel: Slack channel to send to
            
        Returns:
            bool: True if alert sent successfully
        """
        
        if not self.webhook_url:
            print("❌ No Slack webhook URL configured")
            return False
        
        if high_risk_firms.empty:
            print("✅ No high-risk firms to alert about")
            return True
        
        try:
            # Create alert message blocks
            alert_blocks = self.create_alert_message(high_risk_firms, threshold)
            
            # Slack payload with rich formatting
            payload = {
                "channel": channel,
                "username": "Credit Risk Monitor",
                "icon_emoji": ":warning:",
                "blocks": alert_blocks
            }
            
            # Send to Slack
            response = requests.post(
                self.webhook_url, 
                json=payload, 
                timeout=10,
                headers={'Content-Type': 'application/json'}
            )
            
            if response.status_code == 200:
                print(f"✅ Slack alert sent successfully for {len(high_risk_firms)} firms")
                
                # Log alert
                self.alert_history.append({
                    'timestamp': datetime.now(),
                    'firms_count': len(high_risk_firms),
                    'firms': high_risk_firms['company'].tolist(),
                    'threshold': threshold,
                    'response_code': response.status_code
                })
                
                return True
            else:
                print(f"❌ Slack alert failed with status code: {response.status_code}")
                print(f"Response: {response.text}")
                return False
                
        except Exception as e:
            print(f"❌ Error sending Slack alert: {e}")
            return False
    
    def send_test_alert(self, webhook_url: Optional[str] = None) -> bool:
        """Send a test alert to verify Slack integration"""
        
        if webhook_url:
            self.webhook_url = webhook_url
        
        if not self.webhook_url:
            print("❌ Please provide a Slack webhook URL")
            return False
        
        # Create test data
        test_data = pd.DataFrame([
            {
                'company': '테스트항공',
                'current_rating': 'BB',
                'overall_risk': 0.18,
                'downgrade_prob': 0.12,
                'default_prob': 0.01
            }
        ])
        
        print("📤 Sending test alert...")
        success = self.send_alert(test_data, threshold=0.15, channel="#general")
        
        if success:
            print("✅ Test alert sent successfully!")
        else:
            print("❌ Test alert failed")
        
        return success
    
    def monitor_and_alert(self, firms: List[FirmProfile], 
                         threshold: float = 0.15) -> bool:
        """
        Monitor firms and send alerts if risks exceed threshold
        
        Args:
            firms: List of firms to monitor
            threshold: Risk threshold for alerts
            
        Returns:
            bool: True if monitoring completed successfully
        """
        
        if not MODEL_AVAILABLE:
            print("❌ Risk scoring models not available")
            return False
        
        print("🔍 Monitoring firms for high-risk situations...")
        
        try:
            # Initialize risk scorer
            risk_scorer = RatingRiskScorer()
            
            # Calculate risks for all firms
            risk_data = []
            for firm in firms:
                risk_assessment = risk_scorer.score_firm(firm, horizon=90)
                risk_data.append({
                    'company': firm.company_name,
                    'current_rating': firm.current_rating,
                    'overall_risk': risk_assessment['overall_change_probability'],
                    'upgrade_prob': risk_assessment['upgrade_probability'],
                    'downgrade_prob': risk_assessment['downgrade_probability'],
                    'default_prob': risk_assessment['default_probability'],
                })
            
            risk_df = pd.DataFrame(risk_data)
            
            # Identify high-risk firms
            high_risk_firms = risk_df[risk_df['overall_risk'] > threshold]
            
            print(f"📊 Monitoring Results:")
            print(f"  - Total firms: {len(risk_df)}")
            print(f"  - High-risk firms: {len(high_risk_firms)}")
            print(f"  - Risk threshold: {threshold:.1%}")
            
            if not high_risk_firms.empty:
                print(f"\n⚠️ High-risk firms detected:")
                for _, firm in high_risk_firms.iterrows():
                    print(f"  - {firm['company']}: {firm['overall_risk']:.1%} risk")
                
                # Send alert
                if self.webhook_url:
                    return self.send_alert(high_risk_firms, threshold)
                else:
                    print("💡 Set webhook URL to enable Slack alerts")
                    return True
            else:
                print("✅ No high-risk firms detected")
                return True
                
        except Exception as e:
            print(f"❌ Error during monitoring: {e}")
            return False

def demo_slack_integration():
    """Demonstrate Slack integration with sample data"""
    
    print("🎯 Slack Alert Integration Demo")
    print("=" * 50)
    
    # Initialize alert manager
    alert_manager = SlackAlertManager()
    
    # Get webhook URL from user (for demo purposes)
    print("\n📱 Slack Webhook Configuration:")
    print("To test Slack integration, you need a webhook URL.")
    print("Get one from: https://api.slack.com/messaging/webhooks")
    
    webhook_url = input("\nEnter your Slack webhook URL (or press Enter to skip): ").strip()
    
    if webhook_url:
        alert_manager.set_webhook_url(webhook_url)
        
        # Test basic alert
        print("\n🧪 Testing basic alert functionality...")
        alert_manager.send_test_alert()
        
        # Monitor sample Korean Airlines
        print("\n🔍 Testing monitoring with Korean Airlines data...")
        
        sample_firms = [
            FirmProfile(
                company_name="대한항공",
                current_rating="A",
                debt_to_assets=0.65,
                current_ratio=0.8,
                roa=0.02,
                roe=0.05,
                operating_margin=0.03,
                equity_ratio=0.35,
                asset_turnover=0.6,
                interest_coverage=2.5,
                quick_ratio=0.7,
                working_capital_ratio=0.1
            ),
            FirmProfile(
                company_name="위험항공",  # Simulated high-risk airline
                current_rating="CCC",
                debt_to_assets=0.95,
                current_ratio=0.3,
                roa=-0.10,
                roe=-0.20,
                operating_margin=-0.05,
                equity_ratio=0.05,
                asset_turnover=0.3,
                interest_coverage=0.5,
                quick_ratio=0.2,
                working_capital_ratio=-0.20
            )
        ]
        
        # Monitor with different thresholds
        for threshold in [0.10, 0.15, 0.20]:
            print(f"\n📊 Testing with {threshold:.1%} threshold...")
            alert_manager.monitor_and_alert(sample_firms, threshold)
    
    else:
        print("⏭️ Skipping Slack integration test")
    
    # Show sample alert message format
    print("\n📝 Sample Alert Message Format:")
    print("-" * 40)
    
    sample_data = pd.DataFrame([
        {
            'company': '대한항공',
            'current_rating': 'A',
            'overall_risk': 0.18,
            'downgrade_prob': 0.12,
            'default_prob': 0.01
        },
        {
            'company': '아시아나항공',
            'current_rating': 'B',
            'overall_risk': 0.22,
            'downgrade_prob': 0.15,
            'default_prob': 0.03
        }
    ])
    
    # Show what the alert would look like
    alert_blocks = alert_manager.create_alert_message(sample_data, 0.15)
    print("Slack message blocks (JSON format):")
    print(json.dumps(alert_blocks, indent=2, ensure_ascii=False))
    
    print("\n✅ Demo completed!")
    
    return alert_manager

if __name__ == "__main__":
    demo_slack_integration() 